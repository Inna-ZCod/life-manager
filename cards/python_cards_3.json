[
  {
    "category": "python",
    "question": "–ß—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º?\n\ntry:\n    x = 1 / 0\nexcept:\n    print('–û—à–∏–±–∫–∞')\n```\n\n",
    "explanation": "–¢—ã –ª–æ–≤–∏—à—å **–≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è**, –≤–∫–ª—é—á–∞—è `KeyboardInterrupt`, `SystemExit` –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ ü§Ø –≠—Ç–æ –º–æ–∂–µ—Ç **—Å–ª–æ–º–∞—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã**, –Ω–∞–ø—Ä–∏–º–µ—Ä, `Ctrl+C` –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –ª–æ–≤–ª—é –≤—Å—ë, –¥–∞–∂–µ –≤—ã—Ö–æ–¥¬ª.",
    "options": [
      {
        "text": "except: –ª–æ–≤–∏—Ç –≤—Å—ë –ø–æ–¥—Ä—è–¥",
        "is_correct": true
      },
      {
        "text": "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞",
        "is_correct": false
      },
      {
        "text": "finally –Ω–µ –Ω—É–∂–µ–Ω",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ª—É—á—à–µ?",
    "explanation": "–õ—É—á—à–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫** –∏ **—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ntry:\n    x = int('abc')\nexcept ValueError as e:\n    logging.exception('–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')\n    raise DataError('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') from e\n```\n\n–≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ **—á–∏—Ç–∞–µ–º—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–∏–∂—É –æ—à–∏–±–∫—É ‚Äî —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –µ—ë –≤—ã–∑–≤–∞–ª–æ¬ª.",
    "options": [
      {
        "text": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ except + raise from",
        "is_correct": true
      },
      {
        "text": "except Exception",
        "is_correct": false
      },
      {
        "text": "–í—Å–µ–≥–¥–∞ assert",
        "is_correct": false
      },
      {
        "text": "pass –≤ except",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `__exit__` –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **–Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É**, –Ω–æ **—É–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ `__exit__`**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    return True\n```\n\n–¢–µ–ø–µ—Ä—å `with` **–Ω–µ —É–ø–∞–¥—ë—Ç**, –Ω–æ —Ç—ã **—É–≤–∏–¥–∏—à—å**, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –º–æ–≥—É –≤—Å—ë –ø–æ—á–∏–Ω–∏—Ç—å, –Ω–æ —Ö–æ—Ç—è –±—ã –∑–Ω–∞—é, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å¬ª.",
    "options": [
      {
        "text": "return True –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "raise –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—à–∏–±–∫—É –≤ `__exit__` –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ `with`?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **—É–≤–∏–¥–µ—Ç—å –æ–±–µ –æ—à–∏–±–∫–∏** ‚Äî –∏ —Ç—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–∏ `with`, –∏ —Ç—É, —á—Ç–æ –≤ `__exit__` ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π `raise` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é\n```\n\n–¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –ø—Ä–∏ –ø—Ä–æ–±—Ä–æ—Å–µ –æ—à–∏–±–∫–∏?",
    "explanation": "–ò—Å–ø–æ–ª—å–∑—É–π `raise ... from ...` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ntry:\n    int('abc')\nexcept ValueError as e:\n    raise TypeError('–û—à–∏–±–∫–∞ —Ç–∏–ø–∞') from e\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏** –∏ **–ø—Ä–∏—á–∏–Ω—É**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π¬ª.",
    "options": [
      {
        "text": "raise ... from ...",
        "is_correct": true
      },
      {
        "text": "raise –±–µ–∑ from",
        "is_correct": false
      },
      {
        "text": "assert",
        "is_correct": false
      },
      {
        "text": "pass –≤ except",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –¥–ª—è **–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫**, –Ω–æ –≤–∞–∂–Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        logging.warning(f'–û—à–∏–±–∫–∞: {exc_val}')\n    return True\n```\n\n–¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ **–Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ**, –Ω–æ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥–∏. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –≤–∏–∂—É, —á—Ç–æ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî –Ω–æ —è –Ω–µ —Ö–æ—á—É, —á—Ç–æ–±—ã –≤—Å—ë —É–ø–∞–ª–æ¬ª.",
    "options": [
      {
        "text": "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ return True",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "raise –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `__exit__` –∏ –Ω–µ —Å–ª–æ–º–∞—Ç—å `with`?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã `__exit__` –Ω–µ —Å–ª–æ–º–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, **–ª–æ–≤–∏ –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ** üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, *args):\n    try:\n        self.resource.close()\n    except:\n        pass\n```\n\n–¢–∞–∫ `__exit__` **–Ω–µ –ø—Ä–µ—Ä–≤—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ**, –Ω–æ **—Ä–µ—Å—É—Ä—Å –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –º–æ–≥—É –≤—Å—ë –ø–æ—á–∏–Ω–∏—Ç—å ‚Äî –Ω–æ —Ö–æ—Ç—è –±—ã –ø–æ–ø—Ä–æ–±—É—é¬ª.",
    "options": [
      {
        "text": "–õ–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ __exit__",
        "is_correct": true
      },
      {
        "text": "finally –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "raise –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `with` –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫**, –Ω–æ –∏ **–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å**, –∏—Å–ø–æ–ª—å–∑—É–π `raise` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\n@contextmanager\ndef safe():\n    try:\n        yield\n    except Exception:\n        logging.exception('–û—à–∏–±–∫–∞')\n        raise\n```\n\n–¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ **–Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞**, –∏ —Ç—ã **—É–∑–Ω–∞–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Å–∫—Ä–æ—é, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å¬ª.",
    "options": [
      {
        "text": "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nclass MyError(Exception):\n    pass\n\ndef f():\n    raise MyError('–û—à–∏–±–∫–∞')\n\ntry:\n    f()\nexcept MyError as e:\n    print(e)\n```\n\n",
    "explanation": "–ú—ã —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `MyError` –∏ –ª–æ–≤–∏–º –µ–≥–æ üì£ –í—ã–≤–µ–¥–µ—Ç—Å—è: `'–û—à–∏–±–∫–∞'`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —è –∑–Ω–∞—é, –∫—Ç–æ —è –∏ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ¬ª.",
    "options": [
      {
        "text": "'–û—à–∏–±–∫–∞'",
        "is_correct": true
      },
      {
        "text": "None",
        "is_correct": false
      },
      {
        "text": "ValueError",
        "is_correct": false
      },
      {
        "text": "AssertionError",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫–æ–π –∫–æ–¥ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å -O?",
    "explanation": "–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å —Ñ–ª–∞–≥–æ–º `-O` –≤—Å–µ `assert` –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è üö´ –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nassert False, '–≠—Ç–æ assert'\n```\n\n–ü—Ä–∏ `-O` –∫–æ–¥ **–Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è**, –∏ `assert` **–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ —è –≤ –±–æ—é ‚Äî —è –Ω–µ —Ö–æ—á—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥¬ª.",
    "options": [
      {
        "text": "assert False",
        "is_correct": true
      },
      {
        "text": "raise ValueError",
        "is_correct": false
      },
      {
        "text": "except Exception",
        "is_correct": false
      },
      {
        "text": "finally –Ω–µ –Ω—É–∂–µ–Ω",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö?",
    "explanation": "–í –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö –≤–∞–∂–Ω–æ **–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º** –∏ **–ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Ö —Å –ø—Ä–∏—á–∏–Ω–æ–π** üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef call_service():\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.warning('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞', exc_info=True)\n        raise ServiceError('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') from e\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã **—Å–æ—Ö—Ä–∞–Ω–∏—à—å —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤** –∏ **–¥–æ–±–∞–≤–∏—à—å –∫–æ–Ω—Ç–µ–∫—Å—Ç**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, –ø–æ—á–µ–º—É¬ª.",
    "options": [
      {
        "text": "raise ... from ...",
        "is_correct": true
      },
      {
        "text": "pass –≤ except",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "assert",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `contextmanager` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ API?",
    "explanation": "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å `@contextmanager`, –∫–æ—Ç–æ—Ä—ã–π **–ª–æ–≥–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\n@contextmanager\ndef api_context():\n    try:\n        yield\n    except ValueError:\n        logging.exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')\n        raise HTTPException(400) from ValueError\n```\n\n–¢–µ–ø–µ—Ä—å –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –≤ `with` –±—É–¥–µ—Ç **–ø—Ä–æ–±—Ä–æ—à–µ–Ω–∞ –≤ –≤–∏–¥–µ HTTP-–æ—à–∏–±–∫–∏**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –∏ —è –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ¬ª.",
    "options": [
      {
        "text": "contextmanager —Å raise",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å with",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `__exit__` –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **–Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫**, –Ω–æ –∏ **—É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ `__exit__`**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø—Ä–æ–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**: —Ç—É, —á—Ç–æ –±—ã–ª–∞, –∏ —Ç—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ `__exit__`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É –æ—à–∏–±–∫—É ‚Äî —è –≤–∏–∂—É, —á—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Å—ë —Å—Ç–∞–ª–æ –µ—â—ë —Ö—É–∂–µ¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –Ω–µ —Ç–µ—Ä—è—Ç—å –æ—à–∏–±–∫–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö?",
    "explanation": "–í –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ –≤–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `await` –≤–Ω—É—Ç—Ä–∏ `try/except`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nasync def faulty():\n    raise ValueError('–û—à–∏–±–∫–∞')\n\nasync def main():\n    task = asyncio.create_task(faulty())\n    try:\n        await task\n    except ValueError:\n        print('–ü–æ–π–º–∞–Ω–æ')\n```\n\n–¢–∞–∫ —Ç—ã **–ª–æ–≤–∏—à—å –æ—à–∏–±–∫—É –≤ –∑–∞–¥–∞—á–µ**, –∏ –º–æ–∂–µ—à—å –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –Ω–µ —Ç–∞–∫¬ª.",
    "options": [
      {
        "text": "await task –≤ try/except",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "except –±–µ–∑ await",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ CLI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö?",
    "explanation": "–í CLI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –≤–∞–∂–Ω–æ –ª–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å **–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef main():\n    try:\n        x = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: '))\n    except ValueError:\n        print('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')\n        sys.exit(1)\n```\n\n–≠—Ç–æ –¥–µ–ª–∞–µ—Ç CLI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã **–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–º–∏**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ù–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤–æ—Ç –ø–æ—á–µ–º—É¬ª.",
    "options": [
      {
        "text": "try/except + sys.exit()",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–í—Å–µ–≥–¥–∞ raise",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É –≤ `__exit__`?",
    "explanation": "–ú–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ `__exit__`, –Ω–æ **–Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–æ–≤—É—é** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    return True\n```\n\n–¢–µ–ø–µ—Ä—å –∏—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞ **–Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞**, –Ω–æ `with` **–Ω–µ —É–ø–∞–¥—ë—Ç**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –≤–∏–∂—É, —á—Ç–æ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–æ —è –Ω–µ —Ö–æ—á—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª.",
    "options": [
      {
        "text": "return True –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "raise –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `contextmanager` –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—à–∏–±–∫—É?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ `with` –Ω–µ –±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞, **–Ω–µ –ø–æ–¥–∞–≤–ª—è–π –µ—ë –≤ `contextmanager`** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\n@contextmanager\ndef safe():\n    try:\n        yield\n    except:\n        print('–û—à–∏–±–∫–∞')\n        raise\n```\n\n–¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ **–Ω–µ –±—É–¥–µ—Ç –ø–æ–¥–∞–≤–ª–µ–Ω–∞**, –∏ —Ç—ã —É–≤–∏–¥–∏—à—å –µ—ë –≤ traceback. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî –∏ —è –¥–æ–ª–∂–µ–Ω –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ `__exit__` –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ `__exit__`, –Ω–æ **—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø—Ä–æ–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–º–∫–∞¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –¥–ª—è **–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫**, –Ω–æ –≤–∞–∂–Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass LogOnError:\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            logging.warning(f'–û—à–∏–±–∫–∞: {exc_val}', exc_info=True)\n        return True\n```\n\n–¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ **–Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ**, –Ω–æ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥–∏. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –≤–∏–∂—É, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–æ —è –Ω–µ —Ö–æ—á—É, —á—Ç–æ–±—ã –≤—Å—ë –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å¬ª.",
    "options": [
      {
        "text": "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ return True",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "raise –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `__exit__` –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫, –Ω–æ –∏ **–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ `__exit__`**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã **—É–≤–∏–¥–∏—à—å –æ–±–µ –æ—à–∏–±–∫–∏** üß† –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –∏ `exc_type`?",
    "explanation": "–í `__exit__` –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å `exc_type`, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type:\n        print(f'–û—à–∏–±–∫–∞: {exc_type}')\n    return True\n```\n\n–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç **–æ—Ç–ª–∏—á–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –≤–∏–∂—É, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –∏ —è –¥–æ–ª–∂–µ–Ω –æ–± —ç—Ç–æ–º –∑–Ω–∞—Ç—å¬ª.",
    "options": [
      {
        "text": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å exc_type",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å finally",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **–Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É**, –Ω–æ –∏ **—É–∑–Ω–∞—Ç—å, —á—Ç–æ `__exit__` —Ç–æ–∂–µ —Å–ª–æ–º–∞–ª—Å—è**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ `__exit__` –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã `__exit__` –Ω–µ –∑–∞–º–µ–Ω—è–ª –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π `raise` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**: —Ç—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –∏ —Ç—É, —á—Ç–æ —Å–ª—É—á–∏–ª–∞—Å—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, —á—Ç–æ –≤—Å—ë —Å—Ç–∞–ª–æ –µ—â—ë —Ö—É–∂–µ¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\ndef f(x, data=[]):\n    data.append(x)\n    return data\n\nprint(f(1))\nprint(f(2))",
    "explanation": "–í—ã–≤–µ–¥–µ—Ç:\n```\n[1]\n[1, 2]\n```\n\n–ü–æ—Ç–æ–º—É —á—Ç–æ –∏–∑–º–µ–Ω—è–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç `[]` —Å–æ–∑–¥–∞—ë—Ç—Å—è **–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏** ü§Ø –≠—Ç–æ **—á–∞—Å—Ç—ã–π –±–∞–≥**, –∏ –µ–≥–æ –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å. –õ—É—á—à–µ —Ç–∞–∫:\n\n```python\ndef f(x, data=None):\n    if data is None:\n        data = []\n    data.append(x)\n    return data\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –Ω–µ–æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π¬ª.",
    "options": [
      {
        "text": "[1] –∏ [1, 2]",
        "is_correct": true
      },
      {
        "text": "[1] –∏ [2]",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      },
      {
        "text": "None",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `functools.lru_cache`?",
    "explanation": "`lru_cache` –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–æ–≤ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom functools import lru_cache\n\n@lru_cache\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n```\n\n–¢–µ–ø–µ—Ä—å `fib(10)` —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ üöÄ –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ —Ç—ã —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–ª ‚Äî –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π¬ª.",
    "options": [
      {
        "text": "–ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "is_correct": true
      },
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏",
        "is_correct": false
      },
      {
        "text": "–ú–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `functools.partial`?",
    "explanation": "`partial` –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom functools import partial\n\ndef power(x, y):\n    return x ** y\n\nsquare = partial(power, y=2)\nprint(square(5))  # 25\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å ¬´–≥–æ—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤¬ª —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
    "options": [
      {
        "text": "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏",
        "is_correct": false
      },
      {
        "text": "–ò–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—é",
        "is_correct": false
      },
      {
        "text": "–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `functools.reduce()`?",
    "explanation": "`reduce()` –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ –ø–∞—Ä–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞–∫–∞–ø–ª–∏–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom functools import reduce\n\nresult = reduce(lambda x, y: x + y, [1, 2, 3, 4])\nprint(result)  # 10\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å **—Ü–µ–ø–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π**, –≥–¥–µ –∫–∞–∂–¥—ã–π —à–∞–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.",
    "options": [
      {
        "text": "–î–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å —á–∏—Å–ª–∞–º–∏",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `functools.singledispatch`?",
    "explanation": "`singledispatch` –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∞—Ä–≥—É–º–µ–Ω—Ç–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom functools import singledispatch\n\n@singledispatch\ndef process(data):\n    raise TypeError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø')\n\n@process.register(int)\ndef _(data):\n    return data * 2\n\n@process.register(str)\ndef _(data):\n    return data.upper()\n```\n\n–¢–µ–ø–µ—Ä—å `process(5)` ‚Üí `10`, `process('hello')` ‚Üí `'HELLO'`. –≠—Ç–æ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å **–ø–µ—Ä–µ–≥—Ä—É–∑–∫—É —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É**.",
    "options": [
      {
        "text": "–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å @property",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `typing.Callable`?",
    "explanation": "`Callable` ‚Äî —ç—Ç–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom typing import Callable, List\n\ndef apply(func: Callable[[int], int], values: List[int]) -> List[int]:\n    return [func(x) for x in values]\n```\n\n–≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ **—á–∏—Ç–∞–µ–º—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º**, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö –∏ API. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –æ–∂–∏–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int¬ª.",
    "options": [
      {
        "text": "–î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å @property",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `typing.Optional`?",
    "explanation": "`Optional` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å `None` üß± –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom typing import Optional\n\ndef get_user(user_id: int) -> Optional[dict]:\n    return db.get(user_id)  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None\n```\n\n–≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ **–ø–æ–Ω—è—Ç–Ω–µ–µ**, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –º–æ–≥—É –≤–µ—Ä–Ω—É—Ç—å dict, –Ω–æ –º–æ–≥—É –∏ None¬ª.",
    "options": [
      {
        "text": "–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å List",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å int",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å raise",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__annotations__` –≤ —Ñ—É–Ω–∫—Ü–∏–∏?",
    "explanation": "–§—É–Ω–∫—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –≤ `__annotations__` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef greet(name: str, age: int) -> str:\n    return f'–ü—Ä–∏–≤–µ—Ç, {name}, —Ç–µ–±–µ {age}'\n\nprint(greet.__annotations__)\n```\n\n–í—ã–≤–µ–¥–µ—Ç: `{'name': str, 'age': int, 'return': str}`. –≠—Ç–æ –∫–∞–∫ **—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** –¥–ª—è IDE –∏ –ª–∏–Ω—Ç–µ—Ä–æ–≤.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__defaults__` –≤ —Ñ—É–Ω–∫—Ü–∏–∏?",
    "explanation": "–§—É–Ω–∫—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ `__defaults__` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef f(a, b=2, c=3):\n    pass\n\nprint(f.__defaults__)  # (2, 3)\n```\n\n–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è **—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏**, **–∏–Ω—Å–ø–µ–∫—Ü–∏–∏**, **–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏** –∏ **–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø —Ö–æ—á—É –∑–Ω–∞—Ç—å, —á—Ç–æ —É –º–µ–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é¬ª.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç `functools.wraps`?",
    "explanation": "`functools.wraps` —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfrom functools import wraps\n\ndef my_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n–¢–µ–ø–µ—Ä—å `help(wrapper)` –ø–æ–∫–∞–∂–µ—Ç **–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Å–∫—Ä–æ—é, –∫—Ç–æ —Ç—ã –µ—Å—Ç—å¬ª.",
    "options": [
      {
        "text": "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–ò–∑–º–µ–Ω—è–µ—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__closure__` –≤ –∑–∞–º—ã–∫–∞–Ω–∏—è—Ö?",
    "explanation": "–í –∑–∞–º—ã–∫–∞–Ω–∏—è—Ö –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ö–≤–∞—á–µ–Ω—ã üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef outer():\n    x = 10\n    def inner():\n        return x\n    return inner\n\nf = outer()\nprint(f.__closure__)  # —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —è –ø–æ–º–Ω—é, —á—Ç–æ –±—ã–ª–æ –≤–æ–∫—Ä—É–≥¬ª.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__code__` –≤ —Ñ—É–Ω–∫—Ü–∏–∏?",
    "explanation": "–ê—Ç—Ä–∏–±—É—Ç `__code__` —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef f(x, y):\n    return x + y\n\nprint(f.__code__.co_varnames)  # ('x', 'y')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω¬ª.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å lambda",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10))",
    "explanation": "–ö–æ–¥ –≤—ã–≤–µ–¥–µ—Ç `55` ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üß† `lru_cache` –∫—ç—à–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã, –∏ `fib()` —Ä–∞–±–æ—Ç–∞–µ—Ç **–≤ —Ä–∞–∑—ã –±—ã—Å—Ç—Ä–µ–µ**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ —Ç—ã —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–ª ‚Äî –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π¬ª.",
    "options": [
      {
        "text": "55",
        "is_correct": true
      },
      {
        "text": "10",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      },
      {
        "text": "None",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `match-case` —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π?",
    "explanation": "`match-case` –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\npoint = (3, 5)\nmatch point:\n    case (x, y):\n        print(f'–¢–æ—á–∫–∞: {x}, {y}')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø ‚Äî —è –∑–Ω–∞—é, **–∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏**¬ª.",
    "options": [
      {
        "text": "match-case –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å try/except",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `match-case` —Å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `case _:` –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nmatch data:\n    case int():\n        print('–ß–∏—Å–ª–æ')\n    case str():\n        print('–°—Ç—Ä–æ–∫–∞')\n    case _:\n        print('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ ‚Äî —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø¬ª.",
    "options": [
      {
        "text": "case _:",
        "is_correct": true
      },
      {
        "text": "default",
        "is_correct": false
      },
      {
        "text": "else",
        "is_correct": false
      },
      {
        "text": "except",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `all()` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π?",
    "explanation": "`all()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ **–≤—Å–µ** —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–∏–Ω–Ω—ã üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nvalues = [True, True, False]\nprint(all(values))  # False\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª ¬´–Ω–µ—Ç¬ª ‚Äî —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "is_correct": true
      },
      {
        "text": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±–æ–≥–æ",
        "is_correct": false
      },
      {
        "text": "–°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "is_correct": false
      },
      {
        "text": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ bool",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `__bool__` –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–∞—Ö?",
    "explanation": "–ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å `__bool__()` –∏–ª–∏ `__len__()` –≤ –∫–ª–∞—Å—Å–µ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass MyList:\n    def __init__(self, items):\n        self.items = items\n\n    def __bool__(self):\n        return len(self.items) > 0\n\nl = MyList([])\nprint(bool(l))  # False\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç ‚Äî —ç—Ç–æ False¬ª.",
    "options": [
      {
        "text": "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å while",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å `None`, `0`, `''`, `[]`?",
    "explanation": "–í Python `None`, `0`, `''`, `[]`, `{}` ‚Äî –≤—Å—ë —ç—Ç–æ `False` ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nif not None:\n    print('None ‚Äî False')\n```\n\n–≠—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å `if x == True` –∏–ª–∏ `if x is None` –≤–º–µ—Å—Ç–æ `if not x`",
    "options": [
      {
        "text": "None, 0, '', [], {} ‚Äî False",
        "is_correct": true
      },
      {
        "text": "–í—Å—ë True",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç len",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools` –≤ —Ü–∏–∫–ª–∞—Ö?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π üì¶ –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nimport itertools\n\nfor x in itertools.repeat(5, 3):\n    print(x)  # 5, 5, 5\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–î–∞–π –º–Ω–µ 5 —Ç—Ä–∏ —Ä–∞–∑–∞¬ª ‚Äî –∏ Python –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æ.",
    "options": [
      {
        "text": "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å for",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ü–∏–∫–ª–µ, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –µ–≥–æ?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `try/except` –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ üîÑ –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nfor x in [1, 2, 'a', 3]:\n    try:\n        print(x ** 2)\n    except TypeError:\n        print(f'{x} –Ω–µ —á–∏—Å–ª–æ')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–º–∞–ª—Å—è ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –≤—Å—é –æ–±—Ä–∞–±–æ—Ç–∫—É¬ª.",
    "options": [
      {
        "text": "try/except –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "pass –≤ —Ü–∏–∫–ª–µ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` —Å –∫–ª–∞—Å—Å–∞–º–∏?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\np = Point(2, 3)\nmatch p:\n    case Point(x=2, y=3):\n        print('–ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ (2, 3)')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø ‚Äî —è –ø—Ä–æ–≤–µ—Ä—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ¬ª.",
    "options": [
      {
        "text": "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` —Å `case .`?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `case .` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Status:\n    OK = 200\n    NOT_FOUND = 404\n\ndef handle(status):\n    match status:\n        case Status.OK:\n            print('–í—Å—ë –æ–∫')\n        case Status.NOT_FOUND:\n            print('–ù–µ –Ω–∞–π–¥–µ–Ω–æ')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —è –ø—Ä–æ–≤–µ—Ä—è—é, –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å¬ª.",
    "options": [
      {
        "text": "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nx = None\nif x is None:\n    print('None')\nif not x:\n    print('False')\n```\n\n",
    "explanation": "–ö–æ–¥ –≤—ã–≤–µ–¥–µ—Ç:\n```\nNone\nFalse\n```\n\n–ü–æ—Ç–æ–º—É —á—Ç–æ `None is None` –∏ `not None` ‚Äî —Ç–æ–∂–µ `True` üß† –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –ø—É—Å—Ç, –Ω–æ —è —Ç–æ–∂–µ False¬ª.",
    "options": [
      {
        "text": "'None' –∏ 'False'",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ 'None'",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ 'False'",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__dict__` –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__dict__` –¥–ª—è **–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å** üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nu = User('Anna', 25)\nprint(u.__dict__)  # {'name': 'Anna', 'age': 25}\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç ‚Äî —è –º–æ–≥—É –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å¬ª.",
    "options": [
      {
        "text": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å –∫–ª–∞—Å—Å–∞–º–∏",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å –º–µ—Ç–æ–¥–∞–º–∏",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `__mro__` –≤ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏?",
    "explanation": "`__mro__` –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass A: pass\nclass B(A): pass\nclass C(A): pass\nclass D(B, C): pass\n\nprint(D.__mro__)\n```\n\n–í—ã–≤–æ–¥: `D, B, C, A, object` ‚Äî Python –∏—â–µ—Ç –º–µ—Ç–æ–¥—ã –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç –≤ D ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ B, –ø–æ—Ç–æ–º –≤ C¬ª.",
    "options": [
      {
        "text": "–ü–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å –∫–ª–∞—Å—Å–∞–º–∏",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__call__` –≤ –∫–ª–∞—Å—Å–µ?",
    "explanation": "–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ–º—ã–º —á–µ—Ä–µ–∑ `__call__` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Adder:\n    def __init__(self, x):\n        self.x = x\n\n    def __call__(self, y):\n        return self.x + y\n\nadd5 = Adder(5)\nprint(add5(3))  # 8\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç ‚Äî —è –º–æ–≥—É –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è¬ª.",
    "options": [
      {
        "text": "–î–µ–ª–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ–º—ã–º",
        "is_correct": true
      },
      {
        "text": "–ú–µ–Ω—è–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __init__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__eq__` –∏ `__hash__`?",
    "explanation": "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å `__eq__` –∏ `__hash__`, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ `set` –∏ `dict` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\nu1 = User('Anna')\nu2 = User('Anna')\n\nprint(u1 == u2)  # True\nprint({u1, u2})  # {<User('Anna')>}\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–≤–Ω—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ `set`¬ª.",
    "options": [
      {
        "text": "–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `__new__` –≤ –∫–ª–∞—Å—Å–µ?",
    "explanation": "`__new__` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è **–¥–æ `__init__`**, –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Singleton:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—é –æ–±—ä–µ–∫—Ç ‚Äî —è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é, –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç¬ª.",
    "options": [
      {
        "text": "–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç",
        "is_correct": true
      },
      {
        "text": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç",
        "is_correct": false
      },
      {
        "text": "–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __init__",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `__del__`?",
    "explanation": "`__del__` ‚Äî —ç—Ç–æ **–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä**, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass MyClass:\n    def __del__(self):\n        print('–£–¥–∞–ª—ë–Ω')\n\nx = MyClass()\ndel x  # –í—ã–∑–æ–≤–µ—Ç __del__\n```\n\n–ù–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: `__del__` **–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç** –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî —É–¥–∞–ª–∏ –º–µ–Ω—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ¬ª.",
    "options": [
      {
        "text": "–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
        "is_correct": true
      },
      {
        "text": "–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç",
        "is_correct": false
      },
      {
        "text": "–ò–∑–º–µ–Ω—è–µ—Ç —Ç–∏–ø",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç `__slots__` –≤ —Å–≤—è–∑–∫–µ —Å `__dict__`?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å `__slots__`, `__dict__` **–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è** ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\np.x = 5\nprint(p.__dict__)  # AttributeError\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø —Ö–æ—á—É –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ ‚Äî –∏ –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤¬ª.",
    "options": [
      {
        "text": "–ù–µ —Å–æ–∑–¥–∞—ë—Ç __dict__",
        "is_correct": true
      },
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç __init__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __new__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__eq__` –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ?",
    "explanation": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é `__eq__` —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å üß† –ù–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\nu1 = User('Anna')\nu2 = User('Anna')\nprint(u1 == u2)  # True\n```\n\n–¢–µ–ø–µ—Ä—å –æ–±—ä–µ–∫—Ç—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ –∏–º–µ–Ω–∏. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –∏–º–µ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª.",
    "options": [
      {
        "text": "–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç ==",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __hash__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__slots__` –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–∞–º—è—Ç—å?",
    "explanation": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `__slots__` **—Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nprint(p.__dict__)  # AttributeError\n```\n\n–ö–ª–∞—Å—Å—ã —Å `__slots__` **–Ω–µ –∏–º–µ—é—Ç `__dict__`**, —á—Ç–æ **—ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å**, –Ω–æ **–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤**. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Äî –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞ —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å¬ª.",
    "options": [
      {
        "text": "–°–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
        "is_correct": true
      },
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç –≤–ª–∏—è–Ω–∏—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__class__` –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ?",
    "explanation": "–ß–µ—Ä–µ–∑ `__class__` –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nx = 5\nprint(x.__class__)  # <class 'int'>\n```\n\n–ò–ª–∏ –¥–∞–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n```python\nclass A:\n    pass\n\nclass B:\n    pass\n\na = A()\na.__class__ = B  # –∏–∑–º–µ–Ω–∏—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç ‚Äî —è –º–æ–≥—É —Å—Ç–∞—Ç—å –¥—Ä—É–≥–∏–º¬ª.",
    "options": [
      {
        "text": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__annotations__` –≤ –∫–ª–∞—Å—Å–µ?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__annotations__` –¥–ª—è **–ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π** üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass User:\n    name: str\n    age: int\n\nprint(User.__annotations__)\n```\n\n–í—ã–≤–æ–¥: `{'name': str, 'age': int}`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –æ–∂–∏–¥–∞—Ç—å¬ª.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__hash__` –≤ –æ–±—ä–µ–∫—Ç–∞—Ö?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å `__eq__`, —Ç–æ **–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏ `__hash__`**, –∏–Ω–∞—á–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ `set` –∏ `dict` ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\ns = {User('Anna'), User('Anna')}\nprint(len(s))  # 1\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–≤–Ω—ã ‚Äî –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ set¬ª.",
    "options": [
      {
        "text": "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ set –∏ dict",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __eq__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__mro__` –≤ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏?",
    "explanation": "`__mro__` –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass A: pass\nclass B(A): pass\nclass C(A): pass\nclass D(B, C): pass\n\nprint(D.__mro__)\n```\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: `D, B, C, A, object`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ì–¥–µ –∏—Å–∫–∞—Ç—å –º–µ—Ç–æ–¥—ã¬ª.",
    "options": [
      {
        "text": "–ü–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__call__` –≤ —Å–≤—è–∑–∫–µ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏?",
    "explanation": "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ `__call__` üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass MyDecorator:\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print('–î–æ –≤—ã–∑–æ–≤–∞')\n        return self.func(*args, **kwargs)\n\n@MyDecorator\ndef greet():\n    print('–ü—Ä–∏–≤–µ—Ç')\n\ngreet()\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, –∫–∞–∫ –º–µ–Ω—è –≤—ã–∑–≤–∞–ª–∏¬ª.",
    "options": [
      {
        "text": "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nclass A:\n    pass\n\nclass B(A):\n    pass\n\nclass C(A):\n    pass\n\nclass D(B, C):\n    pass\n\nprint(D.__mro__)",
    "explanation": "–í—ã–≤–æ–¥ –±—É–¥–µ—Ç: `D, B, C, A, object` üß† –≠—Ç–æ –ø–æ—Ä—è–¥–æ–∫ MRO: Python –∏—â–µ—Ç –º–µ—Ç–æ–¥—ã —Å–Ω–∞—á–∞–ª–∞ –≤ `D`, –ø–æ—Ç–æ–º –≤ `B`, –ø–æ—Ç–æ–º –≤ `C`, `A`, `object`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—Å–ª–µ–¥—É—é—Å—å ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, –≥–¥–µ –∏—Å–∫–∞—Ç—å –º–µ—Ç–æ–¥—ã¬ª.",
    "options": [
      {
        "text": "D, B, C, A, object",
        "is_correct": true
      },
      {
        "text": "D, C, B, A",
        "is_correct": false
      },
      {
        "text": "D, A, B, C",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__dict__` –≤ –∫–ª–∞—Å—Å–µ?",
    "explanation": "–í –∫–ª–∞—Å—Å–µ `__dict__` —Ö—Ä–∞–Ω–∏—Ç **–∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã** üìã –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass MyClass:\n    def __init__(self):\n        self.x = 1\n\nprint(MyClass.__dict__)\n```\n\n–í—ã–≤–µ–¥–µ—Ç: –≤—Å–µ –º–µ—Ç–æ–¥—ã, –≤–∫–ª—é—á–∞—è `__init__`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, —á—Ç–æ –≤–æ –º–Ω–µ –µ—Å—Ç—å¬ª.",
    "options": [
      {
        "text": "–•—Ä–∞–Ω–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __new__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__slots__` –≤–ª–∏—è–µ—Ç –Ω–∞ `__dict__`?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å `__slots__`, `__dict__` **–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è** ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nprint(p.__dict__)  # AttributeError\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Äî –∏ –Ω–µ –¥–∞–º —Ç–µ–±–µ –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø¬ª.",
    "options": [
      {
        "text": "–ù–µ —Å–æ–∑–¥–∞—ë—Ç __dict__",
        "is_correct": true
      },
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç __init__",
        "is_correct": false
      },
      {
        "text": "–ú–µ–Ω—è–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__eq__` –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤?",
    "explanation": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é `__eq__` —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å ü§Ø –ù–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\nu1 = User('Anna')\nu2 = User('Anna')\nprint(u1 == u2)  # True\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –∏–º–µ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª.",
    "options": [
      {
        "text": "–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç ==",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __hash__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__hash__` –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ `set` –∏ `dict`?",
    "explanation": "–ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ `set` –∏–ª–∏ `dict`, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à–∏—Ä—É–µ–º—ã–º üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\ns = {User('Anna'), User('Anna')}\nprint(len(s))  # 1\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–≤–Ω—ã ‚Äî –ø—É—Å—Ç—å –≤ set –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω¬ª.",
    "options": [
      {
        "text": "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ set –∏ dict",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __eq__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__class__` –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞?",
    "explanation": "–ß–µ—Ä–µ–∑ `__class__` –º–æ–∂–Ω–æ **–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass A:\n    def greet(self):\n        print('–ü—Ä–∏–≤–µ—Ç –æ—Ç A')\n\nclass B:\n    def greet(self):\n        print('–ü—Ä–∏–≤–µ—Ç –æ—Ç B')\n\na = A()\na.__class__ = B\na.greet()  # –ü—Ä–∏–≤–µ—Ç –æ—Ç B\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ A ‚Äî —è —Ç–µ–ø–µ—Ä—å B¬ª.",
    "options": [
      {
        "text": "–ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __slots__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__slots__` –∏ `__dict__` –≤–º–µ—Å—Ç–µ?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å `__slots__`, `__dict__` **–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è** ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nprint(p.__dict__)  # AttributeError\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Äî –∏ –Ω–µ –¥–∞–º —Ç–µ–±–µ –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø¬ª.",
    "options": [
      {
        "text": "–ù–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ",
        "is_correct": true
      },
      {
        "text": "–ú–æ–∂–Ω–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ú–æ–∂–Ω–æ —Å __new__",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__slots__` –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
    "explanation": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `__slots__` **—É—Å–∫–æ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º** üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nprint(p.x)  # –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ –∫–ª–∞—Å—Å–µ –±–µ–∑ __slots__\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî —è —Ö–æ—á—É –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø¬ª.",
    "options": [
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º",
        "is_correct": true
      },
      {
        "text": "–£—Å–∫–æ—Ä—è–µ—Ç __init__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç –≤–ª–∏—è–Ω–∏—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__eq__` –≤–ª–∏—è–µ—Ç –Ω–∞ `set` –∏ `dict`?",
    "explanation": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ä–µ–∫—Ç—ã –Ω–µ —Ä–∞–≤–Ω—ã –¥–∞–∂–µ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö ü§Ø –ù–æ —Å `__eq__` –∏ `__hash__` –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã `set` –∏ `dict` —Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n\n```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\nusers = {User('Anna'), User('Anna')}\nprint(len(users))  # 1\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ ‚Äî –ø—É—Å—Ç—å –≤ set –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω¬ª.",
    "options": [
      {
        "text": "–î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ set –∏ dict",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __repr__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë —Ä–∞–≤–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__slots__` –≤–ª–∏—è–µ—Ç –Ω–∞ `pickle`?",
    "explanation": "–ö–ª–∞—Å—Å—ã —Å `__slots__` **–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç `__getstate__` –∏ `__setstate__`** ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nimport pickle\n\npickle.dumps(p)  # –û—à–∏–±–∫–∞\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Äî –∏ –Ω–µ —Ö–æ—á—É –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º¬ª.",
    "options": [
      {
        "text": "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pickle",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å __new__",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nclass A:\n    def greet(self):\n        print('A')\n\nclass B:\n    def greet(self):\n        print('B')\n\nclass C(A, B):\n    pass\n\nprint(C.__mro__)\n```\n\n",
    "explanation": "–í—ã–≤–µ–¥–µ—Ç: `<class 'C'>, <class 'A'>, <class 'B'>, <class 'object'>` üß† –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—Å–ª–µ–¥—É—é—Å—å ‚Äî —è –µ—â—ë –∏ –ø–æ–º–Ω—é, –≥–¥–µ –∏—Å–∫–∞—Ç—å –º–µ—Ç–æ–¥—ã¬ª.",
    "options": [
      {
        "text": "C, A, B, object",
        "is_correct": true
      },
      {
        "text": "C, B, A",
        "is_correct": false
      },
      {
        "text": "C, A, object",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å `None`, `0`, `''`, `[]`, `{}`?",
    "explanation": "–í Python `None`, `0`, `''`, `[]`, `{}` ‚Äî –≤—Å—ë —ç—Ç–æ `False` ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nif not None:\n    print('None ‚Äî False')\n```\n\n–≠—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å `if x == True` –∏–ª–∏ `if x is None` –≤–º–µ—Å—Ç–æ `if not x`",
    "options": [
      {
        "text": "None, 0, '', [], {} ‚Äî False",
        "is_correct": true
      },
      {
        "text": "–í—Å—ë True",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç len",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__slots__` –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å `__dict__`?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å `__slots__`, `__dict__` **–Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è** ü§Ø –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass Point:\n    __slots__ = ['x', 'y']\n\np = Point()\nprint(p.__dict__)  # AttributeError\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ö–æ—á—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ‚Äî –∏ –Ω–µ –¥–∞–º —Ç–µ–±–µ –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø¬ª.",
    "options": [
      {
        "text": "–ù–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ",
        "is_correct": true
      },
      {
        "text": "–ú–æ–∂–Ω–æ —Å __dict__",
        "is_correct": false
      },
      {
        "text": "–ú–æ–∂–Ω–æ —Å __new__",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `all()` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤ —Ü–∏–∫–ª–µ?",
    "explanation": "`all()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ **–≤—Å–µ** —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–∏–Ω–Ω—ã üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nvalues = [True, True, False]\nprint(all(values))  # False\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª ¬´–Ω–µ—Ç¬ª ‚Äî —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.",
    "options": [
      {
        "text": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "is_correct": true
      },
      {
        "text": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±–æ–≥–æ",
        "is_correct": false
      },
      {
        "text": "–°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "is_correct": false
      },
      {
        "text": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ bool",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ü–∏–∫–ª–µ –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫**, –Ω–æ –∏ **—É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ `__exit__`**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**: —Ç—É, —á—Ç–æ –±—ã–ª–∞, –∏ —Ç—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ `__exit__`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É, —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî —è –≤–∏–∂—É, —á—Ç–æ –≤—Å—ë —Å—Ç–∞–ª–æ –µ—â—ë —Ö—É–∂–µ¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `__exit__` –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤?",
    "explanation": "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å **—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–∫**, –Ω–æ –∏ **–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ `__exit__`**, –¥–µ–ª–∞–π —Ç–∞–∫:\n\n```python\ndef __exit__(self, *args):\n    if args[0]:\n        print('–û—à–∏–±–∫–∞ –≤ __exit__')\n    raise  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É\n```\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —É–≤–∏–¥–∏—à—å **–æ–±–µ –æ—à–∏–±–∫–∏**: —Ç—É, —á—Ç–æ –±—ã–ª–∞, –∏ —Ç—É, —á—Ç–æ –≤ `__exit__`. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–∂—É –æ—à–∏–±–∫—É ‚Äî —è –≤–∏–∂—É, —á—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Å—ë —Å—Ç–∞–ª–æ –µ—â—ë —Ö—É–∂–µ¬ª.",
    "options": [
      {
        "text": "raise –≤ __exit__",
        "is_correct": true
      },
      {
        "text": "finally —Ä–µ—à–∏—Ç –≤—Å—ë",
        "is_correct": false
      },
      {
        "text": "return True –≤ __exit__",
        "is_correct": false
      },
      {
        "text": "except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π?",
    "explanation": "`match-case` –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\npoint = (3, 5)\nmatch point:\n    case (x, y):\n        print(f'–¢–æ—á–∫–∞: {x}, {y}')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø ‚Äî —è –∑–Ω–∞—é, –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏¬ª.",
    "options": [
      {
        "text": "match-case –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å try/except",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools.count()`?",
    "explanation": "`itertools.count()` —Å–æ–∑–¥–∞—ë—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nimport itertools\n\nfor x in itertools.count(1):\n    if x > 5:\n        break\n    print(x)  # 1, 2, 3, 4, 5\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–î–∞–π –º–Ω–µ —á–∏—Å–ª–∞, –ø–æ–∫–∞ —è –Ω–µ —Å–∫–∞–∂—É —Å—Ç–æ–ø¬ª.",
    "options": [
      {
        "text": "–î–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å for",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools.takewhile()`?",
    "explanation": "`takewhile()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nimport itertools\n\nfor x in itertools.takewhile(lambda x: x < 5, [1, 2, 3, 4, 5, 6]):\n    print(x)  # 1, 2, 3, 4\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü–æ–∫–∞ x < 5 ‚Äî —è –ø—Ä–æ–¥–æ–ª–∂–∞—é¬ª.",
    "options": [
      {
        "text": "–î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Å–ª–æ–≤–∏—é",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å while",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `any()` –∏ `all()` —Ä–∞–±–æ—Ç–∞—é—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `any()` –∏ `all()` —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nvalues = (x % 2 == 0 for x in [2, 4, 6, 7])\nprint(any(values))  # True\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —á—ë—Ç–Ω—ã–π ‚Äî —ç—Ç–æ True¬ª.",
    "options": [
      {
        "text": "any/all —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å while",
        "is_correct": false
      },
      {
        "text": "–í—Å—ë –≤–µ—Ä–Ω–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ `__bool__` –≤–ª–∏—è–µ—Ç –Ω–∞ `if` –∏ `while`?",
    "explanation": "–ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å `__bool__()` –∏–ª–∏ `__len__()` –≤ –∫–ª–∞—Å—Å–µ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nclass MyList:\n    def __init__(self, items):\n        self.items = items\n\n    def __bool__(self):\n        return len(self.items) > 0\n\nl = MyList([])\nif not l:\n    print('–ü—É—Å—Ç–æ')\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü—É—Å—Ç–∞—è –∫–æ—Ä–æ–±–∫–∞ ‚Äî —ç—Ç–æ False¬ª.",
    "options": [
      {
        "text": "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å while",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON?",
    "explanation": "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `match-case` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–¥–∞–Ω–Ω—ã—Ö üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\ndef process(data):\n    match data:\n        case {'type': 'user', 'id': int(id)}:\n            return f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{id}'\n        case _:\n            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø ‚Äî —è –∑–Ω–∞—é, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏¬ª.",
    "options": [
      {
        "text": "–î–ª—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ JSON",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å if",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å assert",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools.repeat()`?",
    "explanation": "`repeat()` –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑ üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nimport itertools\n\nfor x in itertools.repeat('hello', 3):\n    print(x)  # hello, hello, hello\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ 3 —Ä–∞–∑–∞¬ª.",
    "options": [
      {
        "text": "–î–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å while",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `itertools.cycle()`?",
    "explanation": "`cycle()` –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç üß† –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n```python\nimport itertools\n\nfor x in itertools.cycle(['red', 'green', 'blue']):\n    print(x)  # red ‚Üí green ‚Üí blue ‚Üí red ‚Üí ...\n```\n\n–≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü–æ–≤—Ç–æ—Ä—è–π, –ø–æ–∫–∞ –Ω–µ —Å–∫–∞–∂—É —Å—Ç–æ–ø¬ª.",
    "options": [
      {
        "text": "–î–ª—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è",
        "is_correct": true
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å list",
        "is_correct": false
      },
      {
        "text": "–¢–æ–ª—å–∫–æ —Å for",
        "is_correct": false
      },
      {
        "text": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è",
        "is_correct": false
      }
    ]
  },
  {
    "category": "python",
    "question": "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nfrom itertools import takewhile\n\ndata = [1, 2, 3, 4, 5, 6]\nresult = list(takewhile(lambda x: x < 4, data))\nprint(result)",
    "explanation": "–í—ã–≤–µ–¥–µ—Ç: `[1, 2, 3]` üß† `takewhile()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ `x >= 4`, –∏—Ç–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –≠—Ç–æ –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å: ¬´–ü–æ–∫–∞ x < 4 ‚Äî —è –ø—Ä–æ–¥–æ–ª–∂–∞—é¬ª.",
    "options": [
      {
        "text": "[1, 2, 3]",
        "is_correct": true
      },
      {
        "text": "[1, 2, 3, 4]",
        "is_correct": false
      },
      {
        "text": "[1, 2, 3, 4, 5, 6]",
        "is_correct": false
      },
      {
        "text": "–û—à–∏–±–∫–∞",
        "is_correct": false
      }
    ]
  }
]