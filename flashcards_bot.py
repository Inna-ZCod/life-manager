from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import sqlite3
import random
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")

CARDS_PER_SESSION = 5

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db():
    conn = sqlite3.connect('task_manager.db')
    conn.row_factory = sqlite3.Row
    return conn

# –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
def get_batch_of_cards(user_id, count=CARDS_PER_SESSION):
    conn = get_db()
    cursor = conn.cursor()
    today = datetime.now().isoformat()

    cursor.execute('''
        SELECT * FROM learning_cards
        WHERE next_review <= ?
        ORDER BY next_review ASC, RANDOM()
        LIMIT ?
    ''', (today, count))
    ready = cursor.fetchall()

    if len(ready) < count:
        remaining = count - len(ready)
        cursor.execute('''
            SELECT * FROM learning_cards
            WHERE next_review > ?
            ORDER BY next_review ASC
            LIMIT ?
        ''', (today, remaining))
        near_future = cursor.fetchall()
        ready.extend(near_future)

    conn.close()
    return [dict(card) for card in ready]

# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
def get_continue_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]])

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update, text, reply_markup=None):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
    await start_new_session(update, context)

# –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
async def start_new_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    queue = get_batch_of_cards(user_id)

    if not queue:
        await send_message(update, "–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    context.chat_data["queue"] = queue
    context.chat_data["processed_cards"] = 0
    context.chat_data["session_stats"] = {"correct": 0, "total": 0}

    await show_next_card(update, context)

# –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
async def show_next_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    queue = context.chat_data.get("queue", [])
    processed = context.chat_data.get("processed_cards", 0)

    logger.info(f"–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏. processed_cards={processed}, –æ—Å—Ç–∞–ª–æ—Å—å –≤ queue={len(queue)}")

    if processed >= CARDS_PER_SESSION or not queue:
        await finish_series(update, context)
        return

    card = queue.pop(0)
    context.chat_data["current_card"] = card

    options = get_options(card["id"])
    random.shuffle(options)
    buttons = []
    correct_answer = None

    for opt in options:
        buttons.append([InlineKeyboardButton(opt["answer_text"],
                        callback_data=f"{card['id']},{opt['answer_text']}")])
        if opt["is_correct"]:
            correct_answer = opt["answer_text"]

    context.chat_data["correct_answer"] = correct_answer

    await send_message(update, f"üîç –í–æ–ø—Ä–æ—Å: {card['question']}",
                       reply_markup=InlineKeyboardMarkup(buttons))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
async def finish_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.chat_data.get("session_stats", {"correct": 0, "total": 0})
    total = stats["total"]
    correct = stats["correct"]
    percent = round((correct / total) * 100, 1) if total else 0

    logger.info("–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    msg = (
        f"üìä –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total} ({percent}%)\n\n"
    )

    if percent >= 80:
        msg += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif percent >= 50:
        msg += "üëç –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!"
    else:
        msg += "üöÄ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å, –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!"

    await send_message(update, msg, reply_markup=get_continue_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "continue":
        await start_new_session(update, context)
        return

    card_id, user_answer = query.data.split(',')
    correct_answer = context.chat_data.get("correct_answer")
    is_correct = (user_answer == correct_answer)

    save_review(int(card_id), user_answer, is_correct)
    update_card_review_time(int(card_id), is_correct)

    stats = context.chat_data.get("session_stats", {"correct": 0, "total": 0})
    stats["total"] += 1
    if is_correct:
        stats["correct"] += 1
    context.chat_data["session_stats"] = stats

    explanation = get_explanation(int(card_id))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç + –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    original_text = query.message.text  # –≠—Ç–æ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if is_correct:
        result_text = f"\n\n‚úÖ <b>–í–µ—Ä–Ω–æ!</b> –í–∞—à –æ—Ç–≤–µ—Ç: '<i>{user_answer}</i>'"
    else:
        result_text = f"\n\n‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '<i>{correct_answer}</i>'"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    full_text = f"{original_text}{result_text}\n\n{explanation}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    await query.edit_message_text(
        text=full_text,
        parse_mode='HTML',
        reply_markup=get_continue_button()
    )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º processed_cards
    count = context.chat_data.get("processed_cards", 0)
    context.chat_data["processed_cards"] = count + 1
    logger.info(f"[–û—Ç–≤–µ—Ç] processed_cards={context.chat_data['processed_cards']}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_options(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT answer_text, is_correct FROM card_options WHERE card_id = ?", (card_id,))
    rows = cursor.fetchall()
    conn.close()
    return [dict(r) for r in rows]

def get_explanation(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT explanation FROM learning_cards WHERE id = ?", (card_id,))
    row = cursor.fetchone()
    conn.close()
    return row["explanation"] if row else "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

def save_review(card_id, answer, is_correct):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO card_reviews (card_id, user_answer, is_correct) VALUES (?, ?, ?)",
                   (card_id, answer, is_correct))
    conn.commit()
    conn.close()

def update_card_review_time(card_id, is_correct):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT ease, review_count FROM learning_cards WHERE id = ?", (card_id,))
    card = cursor.fetchone()

    if is_correct:
        new_ease = min(card["ease"] + 0.1, 2.5)
        interval = max(1, int(card["review_count"] * new_ease))
    else:
        new_ease = max(1.3, card["ease"] - 0.2)
        interval = 1

    next_review = datetime.now() + timedelta(days=interval)
    cursor.execute('''
        UPDATE learning_cards 
        SET ease = ?, review_count = review_count + 1, next_review = ?
        WHERE id = ?
    ''', (new_ease, next_review.isoformat(), card_id))
    conn.commit()
    conn.close()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
    from init_db import init_db_and_populate
    init_db_and_populate()

    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app = ApplicationBuilder().token(bot_token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_answer))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π")
    app.run_polling(drop_pending_updates=True)
