from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import sqlite3
import random
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CARDS_PER_SESSION = 5


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    conn = sqlite3.connect('task_manager.db')
    conn.row_factory = sqlite3.Row
    return conn


# –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–µ—Ä–∏–∏ (—Å —É—á–µ—Ç–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö –º–∞–ª–æ)
def get_batch_of_cards(user_id, count=CARDS_PER_SESSION):
    conn = get_db()
    cursor = conn.cursor()
    today = datetime.now().isoformat()

    # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
    cursor.execute('''
        SELECT * FROM learning_cards
        WHERE next_review <= ?
        ORDER BY next_review ASC, RANDOM()
        LIMIT ?
    ''', (today, count))
    cards = cursor.fetchall()

    # –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ, –¥–æ–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ
    if len(cards) < count:
        remaining = count - len(cards)
        cursor.execute('''
            SELECT * FROM learning_cards
            WHERE next_review > ?
            ORDER BY next_review ASC
            LIMIT ?
        ''', (today, remaining))
        additional_cards = cursor.fetchall()
        cards.extend(additional_cards)

    conn.close()
    return [dict(card) for card in cards]


# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
def get_continue_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]
    ])


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
async def start(update: Update, context):
    await send_message(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –º–∏–Ω–∏-–∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
    await start_new_session(update, context)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(update, text, reply_markup=None):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)


# –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
async def start_new_session(update: Update, context):
    try:
        user_id = update.effective_user.id
        queue = get_batch_of_cards(user_id)

        if not queue:
            await send_message(update, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return

        context.user_data["queue"] = queue
        context.user_data["session_stats"] = {"correct": 0, "total": 0}
        await show_card(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_session: {e}")
        await send_message(
            update,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫.",
            reply_markup=get_continue_button()
        )


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def show_card(update: Update, context):
    try:
        queue = context.user_data.get("queue", [])

        # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not queue:
            await finish_session(update, context)
            return

        current_card = queue.pop(0)
        context.user_data["current_card"] = current_card

        options = get_options(current_card['id'])
        random.shuffle(options)
        correct_answer = None
        buttons = []

        for opt in options:
            buttons.append(
                [InlineKeyboardButton(opt['answer_text'], callback_data=f"{current_card['id']},{opt['answer_text']}")])
            if opt['is_correct']:
                correct_answer = opt['answer_text']

        reply_markup = InlineKeyboardMarkup(buttons)
        context.user_data["correct_answer"] = correct_answer

        await send_message(update, f"üß† {current_card['question']}", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_card: {e}")
        await send_message(
            update,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏.",
            reply_markup=get_continue_button()
        )


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def finish_session(update: Update, context):
    stats = context.user_data.get("session_stats", {"correct": 0, "total": 0})
    percent = stats["correct"] / stats["total"] * 100 if stats["total"] > 0 else 0

    message = f"üìä –°–µ—Ä–∏—è –∏–∑ {stats['total']} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
    message += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct']} ({percent:.1f}%)"

    if percent >= 80:
        message += "\n\n‚ú® –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif percent >= 50:
        message += "\n\nü´∂ –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
    else:
        message += "\n\nüí™ –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è –±—É–¥–µ—Ç –ª—É—á—à–µ!"

    await send_message(
        update,
        message,
        reply_markup=get_continue_button()
    )


# –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
def get_options(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT answer_text, is_correct FROM card_options WHERE card_id = ?", (card_id,))
    options = cursor.fetchall()
    conn.close()

    if not options:
        return [{"answer_text": "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "is_correct": False}]

    return [dict(option) for option in options]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def handle_answer(update: Update, context):
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    if query.data == "continue":
        await start_new_session(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
    data = query.data.split(',')
    card_id = int(data[0])
    user_answer = data[1]

    correct_answer = context.user_data.get("correct_answer", "")
    is_correct = (user_answer == correct_answer)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_review(card_id, user_answer, is_correct)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
    stats = context.user_data.get("session_stats", {"correct": 0, "total": 0})
    if is_correct:
        stats["correct"] += 1
    stats["total"] += 1
    context.user_data["session_stats"] = stats

    # –í—ã–≤–æ–¥–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    explanation = get_explanation(card_id)
    if is_correct:
        message = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n{explanation}"
    else:
        message = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n{explanation}"

    await query.edit_message_text(text=message, reply_markup=get_continue_button())

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    update_card_review_time(card_id, is_correct)


# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
def update_card_review_time(card_id, is_correct):
    conn = get_db()
    cursor = conn.cursor()

    cursor.execute("SELECT ease, review_count FROM learning_cards WHERE id = ?", (card_id,))
    card = cursor.fetchone()

    if is_correct:
        new_ease = min(card['ease'] + 0.1, 2.5)
        interval = max(1, int(card['review_count'] * new_ease))
    else:
        new_ease = max(1.3, card['ease'] - 0.2)
        interval = 1

    next_review = datetime.now() + timedelta(days=interval)

    cursor.execute('''
        UPDATE learning_cards 
        SET ease = ?, review_count = review_count + 1, next_review = ?
        WHERE id = ?
    ''', (new_ease, next_review, card_id))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
def get_explanation(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT explanation FROM learning_cards WHERE id = ?", (card_id,))
    result = cursor.fetchone()["explanation"]
    conn.close()
    return result


# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
def save_review(card_id, user_answer, is_correct):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO card_reviews (card_id, user_answer, is_correct)
        VALUES (?, ?, ?)
    ''', (card_id, user_answer, is_correct))
    conn.commit()
    conn.close()


if __name__ == '__main__':
    application = ApplicationBuilder().token(bot_token).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_answer))
    application.run_polling(drop_pending_updates=True)


