from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import sqlite3
import random
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏
CARDS_PER_SESSION = 5


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    conn = sqlite3.connect('task_manager.db')
    conn.row_factory = sqlite3.Row
    return conn


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏
def get_batch_of_cards(user_id, count=CARDS_PER_SESSION):
    conn = get_db()
    cursor = conn.cursor()
    today = datetime.now().isoformat()

    # –ë–µ—Ä—ë–º –∫–∞—Ä—Ç–æ—á–∫–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
    cursor.execute('''
        SELECT * FROM learning_cards
        WHERE next_review <= ?
        ORDER BY next_review ASC, RANDOM()
        LIMIT ?
    ''', (today, count))
    ready_cards = cursor.fetchall()

    # –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if len(ready_cards) < count:
        remaining = count - len(ready_cards)
        cursor.execute('''
            SELECT * FROM learning_cards
            WHERE next_review > ?
            ORDER BY next_review ASC
            LIMIT ?
        ''', (today, remaining))
        near_future_cards = cursor.fetchall()
        ready_cards.extend(near_future_cards)

    conn.close()
    return [dict(card) for card in ready_cards]


# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
def get_nearby_cards(user_id, count=CARDS_PER_SESSION):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM learning_cards
        ORDER BY next_review ASC
        LIMIT ?
    ''', (count,))
    nearby_cards = cursor.fetchall()
    conn.close()
    return [dict(card) for card in nearby_cards]


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
def get_continue_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]])


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_message(update, text, reply_markup=None):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def start(update: Update, context):
    await send_message(update, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é!")
    await start_new_session(update, context)


# –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
async def start_new_session(update: Update, context):
    try:
        user_id = update.effective_user.id
        queue = get_batch_of_cards(user_id)

        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if not queue:
            queue = get_nearby_cards(user_id)
            if not queue:
                await send_message(update, "–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        context.user_data["queue"] = queue
        context.user_data["session_stats"] = {"correct": 0, "total": 0}
        await show_next_card_in_series(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_session: {e}")
        await send_message(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫.")


# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏
async def show_next_card_in_series(update: Update, context):
    try:
        queue = context.user_data.get("queue", [])

        if not queue:
            await finish_current_series(update, context)
            return

        current_card = queue.pop(0)
        context.user_data["current_card"] = current_card

        options = get_options(current_card['id'])
        random.shuffle(options)
        correct_answer = None
        buttons = []

        for opt in options:
            buttons.append([InlineKeyboardButton(opt['answer_text'],
                                                 callback_data=f"{current_card['id']},{opt['answer_text']}"), ])
            if opt['is_correct']:
                correct_answer = opt['answer_text']

        reply_markup = InlineKeyboardMarkup(buttons)
        context.user_data["correct_answer"] = correct_answer

        await send_message(update, f"üîç –í–æ–ø—Ä–æ—Å: {current_card['question']}", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_next_card_in_series: {e}")
        await send_message(update, "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏.")


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def finish_current_series(update: Update, context):
    session_stats = context.user_data.get("session_stats", {"correct": 0, "total": 0})
    total_answers = session_stats["total"]
    correct_answers = session_stats["correct"]
    percentage = round((correct_answers / total_answers) * 100, 1) if total_answers > 0 else 0

    message = (
        f"üìä –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏–∑ {total_answers} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers}/{total_answers} ({percentage}%).\n\n"
    )

    if percentage >= 80:
        message += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif percentage >= 50:
        message += "üëç –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ."
    else:
        message += "üöÄ –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑!"

    await send_message(update, message, reply_markup=get_continue_button())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
async def handle_answer(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "continue":
        await start_new_session(update, context)
        return

    data = query.data.split(',')
    card_id = int(data[0])
    user_answer = data[1]

    correct_answer = context.user_data.get("correct_answer", "")
    is_correct = (user_answer == correct_answer)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    save_review(card_id, user_answer, is_correct)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    session_stats = context.user_data.get("session_stats", {"correct": 0, "total": 0})
    if is_correct:
        session_stats["correct"] += 1
    session_stats["total"] += 1
    context.user_data["session_stats"] = session_stats

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    explanation = get_explanation(card_id)
    if is_correct:
        message = f"‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: '{user_answer}'\n\n{explanation}"
    else:
        message = f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'\n\n{explanation}"

    await query.edit_message_text(message, reply_markup=get_continue_button())

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    update_card_review_time(card_id, is_correct)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
def update_card_review_time(card_id, is_correct):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT ease, review_count FROM learning_cards WHERE id = ?", (card_id,))
    card = cursor.fetchone()

    if is_correct:
        new_ease = min(card['ease'] + 0.1, 2.5)
        interval = max(1, int(card['review_count'] * new_ease))
    else:
        new_ease = max(1.3, card['ease'] - 0.2)
        interval = 1

    next_review = datetime.now() + timedelta(days=interval)

    cursor.execute('''
        UPDATE learning_cards 
        SET ease = ?, review_count = review_count + 1, next_review = ?
        WHERE id = ?
    ''', (new_ease, next_review.isoformat(), card_id))
    conn.commit()
    conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
def get_options(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT answer_text, is_correct FROM card_options WHERE card_id = ?", (card_id,))
    options = cursor.fetchall()
    conn.close()

    if not options:
        return [{"answer_text": "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "is_correct": False}]

    return [dict(option) for option in options]


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
def get_explanation(card_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT explanation FROM learning_cards WHERE id = ?", (card_id,))
    result = cursor.fetchone()
    conn.close()
    return result["explanation"]


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
def save_review(card_id, user_answer, is_correct):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO card_reviews (card_id, user_answer, is_correct)
        VALUES (?, ?, ?)
    ''', (card_id, user_answer, is_correct))
    conn.commit()
    conn.close()


if __name__ == "__main__":
    application = ApplicationBuilder().token(bot_token).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_answer))
    application.run_polling(drop_pending_updates=True)


# –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –¥–µ–ª–∏—Ç –Ω–∞ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É