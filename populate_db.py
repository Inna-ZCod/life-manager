
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ json (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)

import os
import json
import sqlite3
from datetime import datetime

def get_db():
    return sqlite3.connect('task_manager.db')

def clear_tables():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    conn = get_db()
    cursor = conn.cursor()

    cursor.execute("DELETE FROM card_options")
    cursor.execute("DELETE FROM learning_cards")
    cursor.execute("DELETE FROM card_reviews")

    # –û—á–∏—â–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ ID
    cursor.execute("DELETE FROM sqlite_sequence WHERE name='learning_cards'")
    cursor.execute("DELETE FROM sqlite_sequence WHERE name='card_options'")
    cursor.execute("DELETE FROM sqlite_sequence WHERE name='card_reviews'")

    conn.commit()
    conn.close()
    print("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")

def load_json_file(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

def populate_cards(cards):
    conn = get_db()
    cursor = conn.cursor()

    for card in cards:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞
        cursor.execute("SELECT id FROM learning_cards WHERE question = ?", (card["question"],))
        existing = cursor.fetchone()

        if existing:
        #    print(f"üîÅ –£–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞: {card['question']}")
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        cursor.execute('''
            INSERT INTO learning_cards 
            (category, question, explanation)
            VALUES (?, ?, ?)
        ''', (
            card["category"],
            card["question"],
            card.get("explanation", "")
        ))

        card_id = cursor.lastrowid

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for option in card.get("options", []):
            cursor.execute('''
                INSERT INTO card_options 
                (card_id, answer_text, is_correct)
                VALUES (?, ?, ?)
            ''', (
                card_id,
                option["text"][:30],
                option["is_correct"]
            ))

    conn.commit()
    conn.close()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(cards)} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")

if __name__ == "__main__":
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-—Ñ–∞–π–ª–∞–º–∏
    cards_dir = "cards"
    files = [f for f in os.listdir(cards_dir) if f.endswith(".json")]

    for file in files:
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file}")
        full_path = os.path.join(cards_dir, file)
        cards = load_json_file(full_path)
        populate_cards(cards)